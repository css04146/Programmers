// 도전 1번째
import java.util.Map;
import java.util.Queue;
import java.util.HashMap;
import java.util.LinkedList;
class Solution {
    int[][] temp;
    
    int width = -1;
    int height = -1;
    
    int[] dx = {1, -1, 0, 0};
    int[] dy = {0, 0, 1, -1};
    
    public int solution(int[][] land) {
        int answer = 0;
        
        height = land.length;
        width = land[0].length;
        
        for(int i = 0; i < width; i++){
            int sum = 0;
            temp = land;
            for(int j = 0; j < height; j++){
                int n = bfs(i, j, temp);
                sum += n;
            }
            answer = Math.max(sum, answer);
        }
        
        return answer;
    }
    public int bfs(int x, int y, int[][] land){
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{x, y});
        int total = 1;
        while(!q.isEmpty()){
            int[] temp = q.poll();
            for(int i = 0; i < 4; i++){
                int cx = temp[0] + dx[i];
                int cy = temp[1] + dy[i];
                if(cx < 0 || cx >= width
                || cy < 0 || cy >= height) continue;
                if(land[cy][cx] == 1){
                    land[cy][cx] = 0;
                    total++;
                    q.add(new int[]{cx, cy});
                }
            }
        }
        return total;
    }
}
